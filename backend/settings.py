"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
import dj_database_url
from dotenv import load_dotenv
# Add Cloudinary settings
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Try loading from Render secret path, else fallback to local .env
if os.path.exists("/etc/secrets/.env"):
    load_dotenv("/etc/secrets/.env")
else:
    load_dotenv()  # local .env
# load_dotenv("/etc/secrets/.env") 
#load_dotenv()  # Load environment variables from .env
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]  # Allows all hosts
# ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'yourdomain.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'taggit',
    'corsheaders',
    'django_filters',
    'rest_framework',  # Django Rest Framework
    'rest_framework.authtoken',  # Add this line for token authentication
    'rest_framework_simplejwt',

    "cloudinary",
    "cloudinary_storage",
    'webpush',


    # My apps
    'authentication',  # Your authentication app
    'payments',
    'notifications',
    'chatbot',
    'pets',  
    'shelters',
    'services',
    'core',
    'articles',
    'feedback',
    'user_profile',

]
    # 'django.contrib.sites',  # Required for Django AllAuth
    # 'rest_framework',
    # 'rest_framework.authtoken',  # Required for token authentication
    # 'dj_rest_auth',
    # 'allauth',  # (Optional) Required for social authentication
    # 'allauth.account',
    # 'allauth.socialaccount',
# SITE_ID = 1  # Required for Django AllAuth
MIDDLEWARE = [
    # added
    'corsheaders.middleware.CorsMiddleware',
    # default
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # ✅ Leave this empty if templates are inside apps
        'APP_DIRS': True, # ✅ Django will automatically look inside app templates/
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# LOCAL DB DEVELOPMENT
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'petradardb',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# PROD DB
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'defaultdb',
#         'USER': 'avnadmin',
#         'PASSWORD': 'AVNS_6jl4lFHC7LcQgLTsgnV',
#         'HOST': 'pg-130a764c-olegs-4d59.h.aivencloud.com',  # e.g., 'localhost' or a remote DB server
#         'PORT': '19323',  # Default PostgreSQL port
#         'OPTIONS': {
#             'sslmode': 'require',  # Ensures a secure SSL connection
#         },
#     }
# }
# GOOOD
DATABASES = {
    'default': {
        'ENGINE': os.getenv("DATABASES_ENGINE"),
        'NAME': os.getenv("DATABASES_NAME"),
        'USER': os.getenv("DATABASES_USER"),
        'PASSWORD': os.getenv("DATABASES_PASSWORD"),
        'HOST': os.getenv("DATABASES_HOST"),  # e.g., 'localhost' or a remote DB server
        'PORT': os.getenv("DATABASES_PORT"),
        'OPTIONS': {
            'sslmode': 'require',  # Ensures a secure SSL connection
        },
    }
}

# DATABASES = {
#     "default": dj_database_url.config(default=os.getenv("DATABASE_URL"))
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'lv'  # Set the language code to Latvian

#TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Riga'  # Set the time zone to Riga, Latvia

USE_I18N = True # Enable internationalization

USE_L10N = True  # Enable localization (Added by me)

USE_TZ = True # Enable time zone support


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles" #added
STATIC_URL = 'static/'

# Enable compression & caching
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],
# }

# Allow all origins to make cross-origin requests
CORS_ALLOW_ALL_ORIGINS = True # Turn off "Allow All Origins" in production

# Specify allowed origins for cross-origin requests
# CORS_ALLOWED_ORIGINS = [
#     "https://pawclix.netlify.app",  # Add your frontend's URL here
# ]
# Allow credentials (cookies, HTTP authentication) to be included in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Define allowed HTTP methods for cross-origin requests
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'OPTIONS',
    'PUT',
    'PATCH',
    'DELETE',
]

# Define allowed headers for cross-origin requests
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization', # Needed for passing JWT token in Authorization header
    'x-csrftoken',
]

# Define which headers should be exposed to the browser
CORS_EXPOSE_HEADERS = [
    'Authorization', # Expose Authorization header if needed
    'X-CSRFTOKEN',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Add this to the end of your settings.py
REST_FRAMEWORK = {
    # Pagination settings
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Paginate API responses
    # 'PAGE_SIZE': 6,  # Number of items per page for pagination (this can be adjusted)
    # Filter backends
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Enables Django filters for your API
        'rest_framework.filters.OrderingFilter',  # Allows ordering of results via query parameters
        'rest_framework.filters.SearchFilter',  # Enables search functionality for your API
    ],
    # Authentication classes
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.SessionAuthentication',  # Default session-based authentication
        #'rest_framework.authentication.TokenAuthentication',  # Secondary auth
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JSON Web Token (JWT) authentication (you can enable either or both)
    ],
    # Permission classes
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',  # Restrict access to authenticated users only
        #'rest_framework.permissions.IsAuthenticatedOrReadOnly',

    ],
    # Throttling settings (Rate limiting)
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',  # Limit the rate of requests for anonymous users
    #     'rest_framework.throttling.UserRateThrottle',  # Limit the rate of requests for authenticated users
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '5/hour',  # Allow 5 requests per hour for anonymous users
    #     'user': '100/hour',  # Allow 100 requests per hour for authenticated users
    # },
    # Renderer settings
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',  # Render the response as JSON (default)
    #     'rest_framework.renderers.BrowsableAPIRenderer',  # Allow browsing the API in a browser
    # ],
    # # Exception handler settings
    # 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',  # Custom exception handler if needed
}
REST_USE_JWT = True

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
EMAIL_USE_TLS = True
# EMAIL_HOST_USER = "your-email@gmail.com"
# EMAIL_HOST_PASSWORD = "your-email-password"
# Looking to send emails in production? Check out our Email API/SMTP product!
# EMAIL_HOST = os.getenv("EMAIL_HOST")
# EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
# EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
# EMAIL_PORT = os.getenv("EMAIL_PORT")



EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Set the custom user model for authentication
AUTH_USER_MODEL = "authentication.CustomUser"

# Simple JWT settings (you can adjust the time for token expiration)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Access token lifetime minutes=15 # Increase to 7 days for development
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),  # Refresh token lifetime days=1 # Optional: Increase refresh token lifetime
    'ROTATE_REFRESH_TOKENS': True, # Issue new refresh token on refresh
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old refresh tokens
    'ALGORITHM': 'HS256',  # Algorithm to use for signing
    'SIGNING_KEY': SECRET_KEY,  # Secret key used for JWT signing
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',  # Ensures the user ID is included in the token
}

# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# if not os.environ.get("DJANGO_DEVELOPMENT"):  # Only in production
#     SECURE_SSL_REDIRECT = True
#     SESSION_COOKIE_SECURE = True
#     CSRF_COOKIE_SECURE = True



# Configure Cloudinary with credentials from environment variables
cloudinary.config(
    cloud_name=os.getenv("CLOUDINARY_CLOUD_NAME"),
    api_key=os.getenv("CLOUDINARY_API_KEY"),
    api_secret=os.getenv("CLOUDINARY_API_SECRET")
)

# Set the default file storage to use Cloudinary for media files
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

# Retrieve Stripe keys and webhook secret from environment variables
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")

# Debugging: Print to ensure it's loaded (Remove in production)
# print("STRIPE_SECRET_KEY:", STRIPE_SECRET_KEY)
# print(os.getenv("STRIPE_SECRET_KEY"))

# settings.py
API_BASE_URL = os.getenv("API_BASE_URL")

WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": os.getenv("VAPID_PUBLIC_KEY"),
    "VAPID_PRIVATE_KEY": os.getenv("VAPID_PRIVATE_KEY"),
    "VAPID_ADMIN_EMAIL": os.getenv("VAPID_ADMIN_EMAIL"),
}

DOMAIN_APP_URL = os.getenv("DOMAIN_APP_URL")

"""
Steps to fully reset your Django DB (PostgreSQL)

1. Delete the database
If you're using PostgreSQL on a platform like Render or locally:
Drop the database manually (via GUI like pgAdmin or DROP DATABASE in SQL)
Or delete the Postgres instance (if you're on Render or another host)

2. Delete migration files
Run this in your terminal from your project root:
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc"  -delete
Or manually delete all files inside each app's migrations/ folder except __init__.py.

3. Clear compiled Python files (optional but good to do)
find . -name "*.pyc" -delete
find . -name "__pycache__" -delete

4. Make new migrations
python manage.py makemigrations

5. Apply the migrations to a fresh DB
python manage.py migrate

6. (Optional) Create a superuser again
python manage.py createsuperuser
"""