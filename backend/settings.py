"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
import dj_database_url
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'taggit',
    'corsheaders',
    'django_filters',
    'rest_framework',  # Django Rest Framework
    'rest_framework.authtoken',  # Add this line for token authentication
    'rest_framework_simplejwt',

    # My apps
    'authentication',  # Your authentication app
    'pets',  
    'shelters',
    'core',
    'articles',
    'user_profile',

]

MIDDLEWARE = [
    # added
    'corsheaders.middleware.CorsMiddleware',
    # default
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    "default": dj_database_url.config(default=os.getenv("DATABASE_URL"))
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'lv'  # Set the language code to Latvian

#TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Riga'  # Set the time zone to Riga, Latvia

USE_I18N = True # Enable internationalization

USE_L10N = True  # Enable localization (Added by me)

USE_TZ = True # Enable time zone support


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles" #added
STATIC_URL = 'static/'

# Enable compression & caching
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],
# }
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # React app running on this port in dev
#     "http://yourfrontenddomain.com",  # Add your production frontend domain here
# ]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'OPTIONS',
    'PUT',
    'PATCH',
    'DELETE',
]
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'x-csrftoken',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Add this to the end of your settings.py
REST_FRAMEWORK = {
    # Pagination settings
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Paginate API responses
    # 'PAGE_SIZE': 6,  # Number of items per page for pagination (this can be adjusted)
    # Filter backends
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Enables Django filters for your API
        'rest_framework.filters.OrderingFilter',  # Allows ordering of results via query parameters
        'rest_framework.filters.SearchFilter',  # Enables search functionality for your API
    ],
    # Authentication classes
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.SessionAuthentication',  # Default session-based authentication
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JSON Web Token (JWT) authentication (you can enable either or both)
    ],
    # Permission classes
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Restrict access to authenticated users only
    ],
    # Throttling settings (Rate limiting)
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',  # Limit the rate of requests for anonymous users
    #     'rest_framework.throttling.UserRateThrottle',  # Limit the rate of requests for authenticated users
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '5/hour',  # Allow 5 requests per hour for anonymous users
    #     'user': '100/hour',  # Allow 100 requests per hour for authenticated users
    # },
    # Renderer settings
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',  # Render the response as JSON (default)
    #     'rest_framework.renderers.BrowsableAPIRenderer',  # Allow browsing the API in a browser
    # ],
    # # Exception handler settings
    # 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',  # Custom exception handler if needed
}

# Simple JWT settings (you can adjust the time for token expiration)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Access token lifetime minutes=15 # Increase to 7 days for development
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),  # Refresh token lifetime days=1 # Optional: Increase refresh token lifetime
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',  # Algorithm to use for signing
    'SIGNING_KEY': SECRET_KEY,  # Secret key used for JWT signing
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',  # Ensures the user ID is included in the token
}

# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# if not os.environ.get("DJANGO_DEVELOPMENT"):  # Only in production
#     SECURE_SSL_REDIRECT = True
#     SESSION_COOKIE_SECURE = True
#     CSRF_COOKIE_SECURE = True

# Add Cloudinary settings

import cloudinary
import cloudinary.uploader
import cloudinary.api

cloudinary.config(
    cloud_name='dymne7cde',
    api_key='973684546521283',
    api_secret='EUe6vH2blGMQfXf7q_-Q4mULoXA'
)